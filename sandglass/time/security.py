# pylint: disable=C0103

from inspect import isclass

from pyramid.security import NO_PERMISSION_REQUIRED

from sandglass.time.utils import get_app_namespace

# Short alias for permission rules that are public
PUBLIC = NO_PERMISSION_REQUIRED

# Group definition for administrators
Administrators = u"time.Administrators"

# Other group name definitions
Users = u"time.Users"
Managers = u"time.Managers"


class PermissionHelper(object):
    """
    Helper class to manage permission names.

    """
    def __init__(self, app_name=None):
        self.app_name = (app_name or get_app_namespace(self))

    def get(self, obj, permission, context=None):
        """
        Get a permission name for an object or fixed string.

        Permission name is generated using given object class name and
        context application name as prefix.
        When `obj` is a string it is used as is, instead of using class
        name.

        Object given as `context` is used to get application name.

        Returns a String.

        """
        obj_is_string = isinstance(obj, basestring)
        if not context:
            if obj_is_string:
                # When no context is given use current application name
                # because no application name can be extracted from a string.
                app_name = self.app_name
            else:
                # By default when no context is given use object as context
                app_name = get_app_namespace(obj)
        else:
            # Get application name for given context
            app_name = get_app_namespace(context)

        if obj_is_string:
            # When obj is a string use it as object name
            obj_name = obj.lower()
        else:
            # Or by default use obj class name
            cls = (obj if isclass(obj) else obj.__class__)
            obj_name = cls.__name__.lower()

        return "{}_{}_{}".format(app_name, obj_name, permission)

    def cruda(self, obj, flags='cruda', context=None):
        """
        Get a list of CRUDA permissions.

        CRUDA stands for:
            C = create
            R = read
            U = update
            D = delete
            A = action

        By default all CRUDA permissions are returned.
        A subset of permition(s) can be generated by using
        different `flags` values.

        Returns a String.

        """
        permissions = []
        for flag in flags.lower():
            if flag == 'c':
                suffix = 'create'
            elif flag == 'r':
                suffix = 'read'
            elif flag == 'u':
                suffix = 'update'
            elif flag == 'd':
                suffix = 'delete'
            elif flag == 'a':
                suffix = 'action'
            else:
                continue

            permission = self.get(obj, suffix, context=context)
            if permission and (permission not in permissions):
                permissions.append(permission)

        return permissions


PERMISSION = PermissionHelper('time')
